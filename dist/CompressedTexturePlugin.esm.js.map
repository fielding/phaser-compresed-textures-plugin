{"mappings":";;;;;;;;;;;;;;;AAQA;;;;;;;;;;ACDA;;;;;ACPA;;;;GAIG,CAEH;;;;;;;;;;GAUG,CACH,IAAI,+BAAS,GAAG,SAAU,IAAI,EAAE;IAC9B,IAAI,OAAO,GAAG;AAAC,WAAI;AAAE,UAAI;AAAE,UAAI;AAAE,UAAI;AAAE,UAAI;AAAE,UAAI;AAAE,UAAI;AAAE,WAAI;AAAE,UAAI;AAAE,UAAI;AAAE,UAAI;AAAE,UAAI;KAAC,AAAC;IAEvF,IAAI,CAAC,AAAC;IACN,IAAI,EAAE,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,AAAC;IAErC,IAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,CAC5B,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,EAAE;QACxB,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QAEhD,OAAO;KACR;IAGH,IAAI,IAAI,GAAG,WAAW,CAAC,iBAAiB,AAAC;IAEzC,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,AAAC;IAE7C,IAAI,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,QAAU,AAAC;IAE1D,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,YAAY,CAAC,AAAC;IAEpD,IAAI,MAAM,KAAK,CAAC,EAAE;QAChB,OAAO,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;QAE9D,OAAO;KACR;IAED,IAAI,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,YAAY,CAAC,AAAC;IAC5D,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,YAAY,CAAC,AAAC;IACnD,IAAI,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,EAAE,YAAY,CAAC,AAAC;IAEpD,IAAI,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,EAAE,YAAY,CAAC,CAAC,AAAC;IAExE,IAAI,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,IAAI,EAAE,YAAY,CAAC,AAAC;IAElE,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,AAAC;IAEtC,IAAI,MAAM,GAAG,EAAW,GAAG,mBAAmB,AAAC;IAC/C,IAAI,UAAU,GAAG,KAAK,AAAC;IACvB,IAAI,WAAW,GAAG,MAAM,AAAC;IAEzB,IAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,CAAE;QACjC,IAAI,SAAS,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,AAAC;QAEnD,kBAAkB;QAClB,MAAM,IAAI,CAAC,CAAC;QAEZ,OAAO,CAAC,CAAC,CAAC,GAAG;YACX,IAAI,EAAE,IAAI,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC;YAC7C,KAAK,EAAE,UAAU;YACjB,MAAM,EAAE,WAAW;SACpB,CAAC;QAEF,kCAAkC;QAClC,uCAAuC;QAEvC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,IAAI,CAAC,CAAC,CAAC;QAC1C,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC;QAE5C,MAAM,IAAI,SAAS,CAAC;KACrB;IAED,OAAO;QACL,OAAO,EAAE,OAAO;QAChB,KAAK,EAAE,KAAK;QACZ,MAAM,EAAE,MAAM;QACd,cAAc,EAAE,cAAc;QAC9B,UAAU,EAAE,IAAI;QAChB,cAAc,EAAE,KAAK;KACtB,CAAC;CACH,AAAC;IAEF,wCAAyB,GAAV,+BAAS;;;AC1FxB;;;;GAIG,CAEH;;GAEG,CACH,SAAS,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE;IAClD,IAAI,IAAI,KAAK,SAAS,EACpB,IAAI,GAAG,EAAE,CAAC;IAGZ,OAAO,IAAI,CAAC,KAAK,CAAC,AAAC,CAAA,KAAK,GAAG,CAAC,CAAA,GAAI,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,AAAC,CAAA,MAAM,GAAG,CAAC,CAAA,GAAI,EAAE,CAAC,GAAG,IAAI,CAAC;CAC5E;AAED;;GAEG,CACH,SAAS,mCAAa,CAAC,KAAK,EAAE,MAAM,EAAE;IACpC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC5B,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAE7B,OAAO,AAAC,KAAK,GAAG,MAAM,GAAI,CAAC,CAAC;CAC7B;AAED;;GAEG,CACH,SAAS,mCAAa,CAAC,KAAK,EAAE,MAAM,EAAE;IACpC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC3B,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAE7B,OAAO,AAAC,KAAK,GAAG,MAAM,GAAI,CAAC,CAAC;CAC7B;AAED;;GAEG,CACH,SAAS,qCAAe,CAAC,KAAK,EAAE,MAAM,EAAE;IACtC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC9C;AAED;;GAEG,CACH,SAAS,uCAAiB,CAAC,KAAK,EAAE,MAAM,EAAE;IACxC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,gCAAU,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,gCAAU,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,gCAAU,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,gCAAU,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,gCAAU,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,gCAAU,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,gCAAU,CAAC,KAAK,EAAE,MAAM,EAAE;IACjC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CAC3C;AAED;;GAEG,CACH,SAAS,iCAAW,CAAC,KAAK,EAAE,MAAM,EAAE;IAClC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;CAC5C;AAED;;GAEG,CACH,SAAS,iCAAW,CAAC,KAAK,EAAE,MAAM,EAAE;IAClC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;CAC5C;AAED;;GAEG,CACH,SAAS,iCAAW,CAAC,KAAK,EAAE,MAAM,EAAE;IAClC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;CAC5C;AAED;;GAEG,CACH,SAAS,kCAAY,CAAC,KAAK,EAAE,MAAM,EAAE;IACnC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;CAC7C;AAED;;GAEG,CACH,SAAS,kCAAY,CAAC,KAAK,EAAE,MAAM,EAAE;IACnC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;CAC9C;AAED;;GAEG,CACH,SAAS,kCAAY,CAAC,KAAK,EAAE,MAAM,EAAE;IACnC,OAAO,6BAAO,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;CAC/C;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG,CACH,IAAI,6BAAO,GAAG;AACZ,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,mCAAa;QAAE,QAAQ,EAAE,KAAM;KAAE;AAChD,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,mCAAa;QAAE,QAAQ,EAAE,KAAM;KAAE;AAChD,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,mCAAa;QAAE,QAAQ,EAAE,KAAM;KAAE;AAChD,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,mCAAa;QAAE,QAAQ,EAAE,KAAM;KAAE;AAChD,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,qCAAe;QAAE,QAAQ,EAAE,KAAM;KAAE;AAClD,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,qCAAe;QAAE,QAAQ,EAAE,KAAM;KAAE;AAClD,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,uCAAiB;QAAE,QAAQ,EAAE,KAAM;KAAE;AACpD,IAAA,CAAC,EAAE;QAAE,QAAQ,EAAE,uCAAiB;QAAE,QAAQ,EAAE,KAAM;KAAE;AACpD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,uCAAiB;QAAE,QAAQ,EAAE,KAAM;KAAE;AACrD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,qCAAe;QAAE,QAAQ,EAAE,KAAM;KAAE;AACnD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,uCAAiB;QAAE,QAAQ,EAAE,KAAM;KAAE;AACrD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,qCAAe;QAAE,QAAQ,EAAE,KAAM;KAAE;AACnD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,qCAAe;QAAE,QAAQ,EAAE,KAAM;KAAE;AACnD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,uCAAiB;QAAE,QAAQ,EAAE,KAAM;KAAE;AACrD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,uCAAiB;QAAE,QAAQ,EAAE,KAAM;KAAE;AACrD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,gCAAU;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC9C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,gCAAU;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC9C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,gCAAU;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC9C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,gCAAU;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC9C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,gCAAU;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC9C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,gCAAU;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC9C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,gCAAU;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC9C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,iCAAW;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC/C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,iCAAW;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC/C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,iCAAW;QAAE,QAAQ,EAAE,KAAM;KAAE;AAC/C,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,kCAAY;QAAE,QAAQ,EAAE,KAAM;KAAE;AAChD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,kCAAY;QAAE,QAAQ,EAAE,KAAM;KAAE;AAChD,IAAA,EAAE,EAAE;QAAE,QAAQ,EAAE,kCAAY;QAAE,QAAQ,EAAE,KAAM;KAAE;CACjD,AAAC;AAEF;;;;;;;;;;GAUG,CACH,IAAI,+BAAS,GAAG,SAAU,IAAI,EAAE;IAC9B,IAAI,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,AAAC;IAE1C,sBAAsB;IACtB,IAAI,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,AAAC;IAE1B,IAAI,cAAc,GAAG,6BAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,AAAC;IACjD,IAAI,YAAY,GAAG,6BAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,AAAC;IAE/C,qBAAqB;IACrB,IAAI,YAAY,GAAG,MAAM,CAAC,EAAE,CAAC,AAAC;IAE9B,eAAe;IACf,IAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,AAAC;IAEtB,gBAAgB;IAChB,IAAI,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,AAAC;IAEvB,qCAAqC;IACrC,IAAI,UAAU,GAAG,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,AAAC;IAEjC,IAAI,KAAK,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,AAAC;IAE7C,IAAI,OAAO,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,AAAC;IAEtC,IAAI,MAAM,GAAG,CAAC,AAAC;IACf,IAAI,UAAU,GAAG,KAAK,AAAC;IACvB,IAAI,WAAW,GAAG,MAAM,AAAC;IAEzB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,CAAE;QACrC,IAAI,SAAS,GAAG,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,AAAC;QAEtD,OAAO,CAAC,CAAC,CAAC,GAAG;YACX,IAAI,EAAE,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,UAAU,GAAG,MAAM,EAAE,SAAS,CAAC;YACxE,KAAK,EAAE,UAAU;YACjB,MAAM,EAAE,WAAW;SACpB,CAAC;QAEF,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,IAAI,CAAC,CAAC,CAAC;QAC1C,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,IAAI,CAAC,CAAC,CAAC;QAE5C,MAAM,IAAI,SAAS,CAAC;KACrB;IAED,OAAO;QACL,OAAO,EAAE,OAAO;QAChB,KAAK,EAAE,KAAK;QACZ,MAAM,EAAE,MAAM;QACd,cAAc,EAAE,cAAc;QAC9B,UAAU,EAAE,IAAI;QAChB,cAAc,EAAE,KAAK;KACtB,CAAC;CACH,AAAC;IAEF,wCAAyB,GAAV,+BAAS;;;AF/PxB;;;;;;;;;;;;;;;;;;GAkBG,CAEH,IAAI,2CAAqB,GAAG,IAAI,0BAAK,CAAC;IACpC,OAAO,EAAE,+BAAS;IAElB,UAAU,EAAE,SAAS,qBAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE;QAC1E,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE;YAvCjD,QAuCmD,MAAM;YAvCzD,KAuC2D,GAAG;YAvC9D,OAuCgE,KAAK;YAvCrE,aAuCuE,WAAW;SAAE,CAAC,CAAC;QAClF,IAAI,KAAK,CAAC,aAAa,EAAE;YACvB,IAAI,KAAK,GAAG,IAAI,uCAAQ,CAAC,MAAM,EAAE;gBAC/B,GAAG,EAAE,GAAG;gBACR,GAAG,EAAE,KAAK,CAAC,aAAa;gBACxB,WAAW,EAAE,WAAW;gBACxB,MAAM,EAAE,KAAK;aACd,CAAC,AAAC;YAEH,+BAAS,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE;gBAAC,KAAK;aAAC,CAAC,CAAC;SACvD,MAAM;YACL,IAAI,SAAS,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,AAAC;YACrE,OAAO,CAAC,GAAG,CAAC;gBAnDlB,WAmDoB,SAAS;aAAE,CAAC,CAAC;YAE3B,IAAI,CAAC,KAAK,CAAC,IAAI,EACb,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC,WAAW,EAAE,KAAK,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;YAGjE,IAAI,KAAK,GAAG,IAAI,yCAAU,CAAC,MAAM,EAAE;gBACjC,GAAG,EAAE,GAAG;gBACR,GAAG,EAAE,KAAK,CAAC,UAAU;gBACrB,SAAS,EAAE,SAAS;gBACpB,WAAW,EAAE,WAAW;gBACxB,MAAM,EAAE,KAAK;aACd,CAAC,AAAC;YAEH,OAAO,CAAC,GAAG,CAAC;gBAjElB,OAiEoB,KAAK;aAAE,CAAC,CAAC;YAEvB,IAAI,KAAK,CAAC,QAAQ,EAAE;gBAClB,IAAI,IAAI,GAAG,IAAI,uCAAQ,CAAC,MAAM,EAAE;oBAC9B,GAAG,EAAE,GAAG;oBACR,GAAG,EAAE,KAAK,CAAC,QAAQ;oBACnB,WAAW,EAAE,WAAW;oBACxB,MAAM,EAAE,KAAK;iBACd,CAAC,AAAC;gBAEH,+BAAS,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE;oBAAC,KAAK;oBAAE,IAAI;iBAAC,CAAC,CAAC;aAC7D,MACC,+BAAS,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE;gBAAC,KAAK;aAAC,CAAC,CAAC;SAEzD;QAED,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACrB;IAED;;;;;;;KAOG,CACH,cAAc,EAAE,SAAU,IAAI,EAAE;QAC9B,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,AAAC;QAErC,IAAI,KAAK,KAAK,EAAE,EAAE;YAChB,IAAI,CAAC,OAAO,EAAE,CAAC;YAEf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAC5B,OAAO;YAGT,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;gBAChE,8CAA8C;gBAC9C,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,AAAC;gBAElC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,AAAC;gBACzB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,AAAC;gBAEzB,IAAI,cAAc,GAAG,MAAM,CAAC,OAAO,AAAC;gBACpC,IAAI,WAAW,GAAG,MAAM,CAAC,IAAI,AAAC;gBAC9B,IAAI,aAAa,GAAG,MAAM,CAAC,MAAM,AAAC;gBAElC,IAAI,OAAO,GAAG,uCAAY,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,AAAC;gBACjE,IAAI,IAAI,GAAG,uCAAY,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,AAAC;gBACxD,IAAI,MAAM,GAAG,uCAAY,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,AAAC;gBACzD,IAAI,kBAAkB,GAAG,uCAAY,CAAC,MAAM,EAAE,oBAAoB,CAAC,AAAC;gBAEpE,IAAI,OAAO,EACT,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAG7B,IAAI,IAAI,EACN,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAGvB,IAAI,MAAM,EACR,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;gBAG3B,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;oBACxC,gDAAgD;oBAChD,IAAI,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,AAAC;oBAEnC,IAAI,GAAG,GAAG,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG,GAAG,UAAU,AAAC;oBAExD,IAAI,KAAK,GAAG,IAAI,yCAAU,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,kBAAkB,CAAC,AAAC;oBAExE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;oBAE3B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBAEtB,sDAAsD;oBACtD,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE;wBACzB,IAAI,SAAS,GAAG,IAAI,yCAAU,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,kBAAkB,CAAC,AAAC;wBAEvF,SAAS,CAAC,IAAI,GAAG,WAAW,CAAC;wBAE7B,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;wBAEzB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;wBAE/B,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;qBAC3B;iBACF;gBAED,6BAA6B;gBAC7B,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBAClC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;gBAC5B,MAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aACjC;SACF;KACF;IAED;;;;;KAKG,CACH,UAAU,EAAE,WAAY;QACtB,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;YAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,AAAC;YAExB,IAAI,KAAK,CAAC,aAAa,EACrB,IAAI,CAAC,eAAe,EAAE,CAAC;iBAClB;gBACL,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,AAAC;gBAC5C,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,AAAC;gBAChD,IAAI,WAAW,AAAC;gBAEhB,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,AAAC;gBAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,AAAC;gBAEzB,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE;oBACxB,WAAW,GAAG,wCAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACpC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC;iBAC/C,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE;oBAC/B,WAAW,GAAG,wCAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACpC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,WAAW,CAAC,CAAC;iBAC/C;gBAED,IAAI,WAAW,IAAI,QAAQ,CAAC,yBAAyB,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,cAAc,CAAC,EAAE;oBAC/F,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;oBAEjG,IAAI,SAAS,GAAG,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,AAAC;oBAErD,cAAc,CAAC,oBAAoB,CAAC,KAAK,CAAC,GAAG,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;iBACxE;aACF;YAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACtB;KACF;IAED;;;;;KAKG,CACH,eAAe,EAAE,WAAY;QAC3B,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,AAAC;QACxB,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,AAAC;QAEzB,IAAI,IAAI,GAAG,EAAE,AAAC;QACd,IAAI,MAAM,GAAG,EAAE,AAAC;QAChB,IAAI,UAAU,GAAG,EAAE,AAAC;QAEpB,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,AAAC;QAC5C,IAAI,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,AAAC;QAChD,IAAI,WAAW,AAAC;QAEhB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;YAC1C,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,AAAC;YAEzB,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,EAC3B,SAAS;YAGX,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,AAAC;YAChC,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,AAAC;YAEnC,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,AAAC;YAEtB,2DAA2D;YAC3D,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;gBAClD,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,AAAC;gBAEjC,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,EAAE;oBACtB,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EACtB,WAAW,GAAG,wCAAS,CAAC,KAAK,CAAC,CAAC;yBAC1B,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,EAC7B,WAAW,GAAG,wCAAS,CAAC,KAAK,CAAC,CAAC;oBAGjC,IAAI,WAAW,IAAI,QAAQ,CAAC,yBAAyB,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,cAAc,CAAC,EAAE;wBAC/F,WAAW,CAAC,MAAM,GAAG,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC,MAAM,EAAE,WAAW,CAAC,cAAc,CAAC,CAAC;wBAEjG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBAEzB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAEhB,IAAI,IAAI,CAAC,QAAQ,EACf,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;qBAEvC;oBAED,MAAM;iBACP;aACF;SACF;QAED,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EACzB,UAAU,GAAG,SAAS,CAAC;QAGzB,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;QAErE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;KACtB;CACF,CAAC,AAAC;IAEH,wCAAqC,GAAtB,2CAAqB;;;AD7PpC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,oBAAoB,GAAG,SAAU,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE;IACrG,IAAI,OAAO,GAAG,IAAI,AAAC;IAEnB,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EACtB;QACI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAExC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;QAEtE,IAAI,SAAS,EACb;YACI,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAExB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,CAErC,eAAQ,CAAC,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;iBAKvC,eAAQ,CAAC,OAAO,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;SAEvC;QAED,IAAI,CAAC,IAAI,CAAC,8BAAM,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACvC;IACD,OAAO,OAAO,CAAC;CAChB,AAhDD;AAmDA,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAqB,GAAG,WAAY;IAChF,MAAM,SAAS,GAAG,2BAA2B,AAAC;IAC9C,MAAM,WAAW,GAAG,SAAS,GAAG,SAAS,AAAC;IAE1C,MAAM,MAAM,GAAG,SAAU,EAAE,EAAE,MAAM,EACnC;QACI,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC,WAAW,GAAG,MAAM,CAAC,AAAC;QAE7F,IAAI,OAAO,EACX;YACI,MAAM,OAAO,GAAG,EAAE,AAAC;YAEnB,IAAK,IAAI,GAAG,IAAI,OAAO,CAEnB,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;YAGhC,OAAO,OAAO,CAAC;SAClB;KACJ,AAAC;IAEF,MAAM,GAAE,GAAG,IAAI,CAAC,EAAE,AAAC;IAEnB,OAAO;QACH,GAAG,EAAE,MAAM,CAAC,GAAE,EAAE,KAAK,CAAC;QACtB,IAAI,EAAE,MAAM,CAAC,GAAE,EAAE,MAAM,CAAC;QACxB,GAAG,EAAE,MAAM,CAAC,GAAE,EAAE,KAAK,CAAC;QACtB,IAAI,EAAE,MAAM,CAAC,GAAE,EAAE,MAAM,CAAC;QACxB,IAAI,EAAE,MAAM,CAAC,GAAE,EAAE,MAAM,CAAC;QACxB,IAAI,EAAE,MAAM,CAAC,GAAE,EAAE,MAAM,CAAC;QACxB,KAAK,EAAE,MAAM,CAAC,GAAE,EAAE,OAAO,CAAC;QAC1B,IAAI,EAAE,MAAM,CAAC,GAAE,EAAE,MAAM,CAAC;QACxB,QAAQ,EAAE,MAAM,CAAC,GAAE,EAAE,WAAW,CAAC;QACjC,GAAG,EAAE,IAAI;KACZ,CAAC;CACH,AAtFD;AAwFA,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,yBAAyB,GAAG,SAAU,UAAU,EAAE,MAAM,EACtG;IACI,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,AAAC;IACpE,IAAI,gBAAgB,EACpB;QACI,IAAI,MAAM,EAEN,OAAO,MAAM,IAAI,gBAAgB,CAAC;aAIlC,OAAO,IAAI,CAAC;KAEnB;IAED,OAAO,KAAK,CAAC;CAChB,AAxGD;AA0GA,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,wBAAwB,GAAG,SAAU,UAAU,EAAE,MAAM,EACrG;IACI,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC,AAAC;IAEpE,IAAI,MAAM,IAAI,gBAAgB,EAE1B,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC;CAEvC,AAlHD;AAoHA,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,uBAAuB,GAAG,SAAU,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAC9H;IACE,IAAI,UAAU,KAAK,SAAS,EAAI,UAAU,GAAG,KAAK,CAAC;IAEnD,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,AAAC;IACjB,IAAI,SAAS,GAAG,EAAE,CAAC,OAAO,AAAC;IAC3B,IAAI,SAAS,GAAG,EAAE,CAAC,OAAO,AAAC;IAC3B,IAAI,IAAI,GAAG,EAAE,CAAC,aAAa,AAAC;IAC5B,IAAI,OAAO,GAAG,IAAI,AAAC;IAEnB,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IACtC,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IAEzC,IAAI,GAAG,GAAG,wCAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,AAAC;IAE1C,IAAI,GAAG,IAAI,CAAC,UAAU,EAElB,IAAI,GAAG,EAAE,CAAC,MAAM,CAAC;IAGrB,IAAI,SAAS,KAAK,qBAAK,CAAC,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAClE;QACI,SAAS,GAAG,AAAC,GAAG,GAAI,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC,MAAM,CAAC;QAClD,SAAS,GAAG,EAAE,CAAC,MAAM,CAAC;KACzB;IAED,IAAI,MAAM,IAAI,MAAM,CAAC,UAAU,EAC/B;QACI,iFAAiF;QACjF,SAAS,GAAG,EAAE,CAAC,MAAM,CAAC;QACtB,SAAS,GAAG,EAAE,CAAC,MAAM,CAAC;KACzB;IAED,IAAI,CAAC,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,EAElE,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;SAIlG,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAGzF,OAAO,OAAO,CAAC;CAChB,AA/JD;AAiKA,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,eAAe,GAAG,SAAU,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,EAC5K;IACE,GAAG,GAAG,AAAC,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,GAAI,IAAI,GAAG,GAAG,CAAC;IACvD,IAAI,SAAS,KAAK,SAAS,EAAI,SAAS,GAAG,KAAK,CAAC;IACjD,IAAI,KAAK,KAAK,SAAS,EAAI,KAAK,GAAG,KAAK,CAAC;IAEzC,IAAI,EAAE,GAAG,IAAI,CAAC,EAAE,AAAC;IACjB,IAAI,OAAO,GAAG,EAAE,CAAC,aAAa,EAAE,AAAC;IAEjC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IAE9B,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;IAClE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;IAClE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC1D,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAE1D,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,8BAA8B,EAAE,GAAG,CAAC,CAAC;IACvD,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;IAE9C,IAAI,cAAc,GAAG,KAAK,AAAC;IAE3B,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,EAC3C;QACI,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;QAEjG,cAAc,GAAG,wCAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACpD,MACI,IAAI,MAAM,CAAC,UAAU,EAC1B;QACI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QACrB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QACvB,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;QAEvC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAE1C,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,EAAE,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;KAEtJ,MAED;QACI,IAAI,CAAC,SAAS,EACd;YACI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YACrB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;SAC1B;QAED,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACjF,cAAc,GAAG,wCAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACpD;IAED,IAAI,cAAc,EAEd,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC;IAGrC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAE3B,OAAO,CAAC,oBAAoB,GAAG,GAAG,CAAC;IACnC,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC;IAChC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;IACtB,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;IAExB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAElC,OAAO,OAAO,CAAC;CAChB,AAlOD;AAoOe,uDAA4C,MAAM,CAAC,OAAO,CAAC,UAAU;IAChF,YAAY,aAAa,CAAE;QACvB,KAAK,CAAC,aAAa,CAAC,CAAC;KACxB;IAED,IAAI,GAAG;QACL,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAC5C,MAAM,IAAI,KAAK,CAAC,yGAAyG,CAAC,CAAC;aACtH,IAAI,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EACpD,MAAM,IAAI,KAAK,CAAC,2GAA2G,CAAC,CAAA;QAG9H,kCAAkC;QAClC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9H,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,SAAS,EAAE,qDAA+B,CAAC,CAAC;KACjF;IAED,UAAU,CAAC,KAAK,EAAE;QACd,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,qDAA+B,CAAC;KAC/D;CACJ;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA0FG,CAEH,SAAS,qDAA+B,CAAC,IAAG,EAAE,GAAG,EAAE,YAAW,EAAE;IAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,AAAC;IAEvC,MAAM,QAAQ,GAAG,SAAU,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,WAAW,EAAE;QACzD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC1B,IAAI,KAAK,GAAG;YACV,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,SAAS;YACrB,QAAQ,EAAE,SAAS;YACnB,aAAa,EAAE,SAAS;YACxB,SAAS,EAAE,SAAS;YACpB,YAAY,EAAE,SAAS;SACxB,AAAC;QAEF,IAAI,wCAAa,CAAC,GAAG,CAAC,EAAE;YACtB,MAAM,MAAM,GAAG,GAAG,AAAC;YAEnB,GAAG,GAAG,uCAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YACjC,IAAI,GAAG,uCAAY,CAAC,MAAM,EAAE,KAAK,CAAC,EAAI,WAAW,GAAG,uCAAY,CAAC,MAAM,EAAE,aAAa,CAAC,AAAC,CAAC;SAC3F;QAED,IAAI,OAAO,GAAG,KAAK,AAAC;QAEpB,IAAK,IAAI,iBAAiB,IAAI,IAAI,CAAE;YAClC,OAAO,CAAC,GAAG,CAAC;gBAhXlB,mBAgXoB,iBAAiB;aAAE,CAAC,CAAC;YAGnC,IAAI,QAAQ,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,EAAE;gBACzD,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,AAAC;gBAEzC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAC9B,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;qBAE5B,KAAK,GAAG,gCAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;gBAGjC,KAAK,CAAC,MAAM,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC;gBAE/C,OAAO,GAAG,IAAI,CAAC;gBAEf,MAAM;aACP;SACF;QAED,IAAI,CAAC,OAAO,EACV,OAAO,CAAC,IAAI,CAAC,wDAAwD,EAAE,GAAG,CAAC,CAAC;aACvE,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,EAAE;YACjC,IAAI,SAAS,AAAC;YACd,IAAI,KAAK,CAAC,aAAa,EAAE;gBACvB,SAAS,GAAG,IAAI,6CAAc,CAC5B,IAAI,EACJ,GAAG,EACH,KAAK,CAAC,aAAa,EACnB,KAAK,CAAC,SAAS,EACf,KAAK,CAAC,YAAY,EAClB,WAAW,CACZ,CAAC;gBACF,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACjC,MAAM,IAAI,KAAK,CAAC,QAAQ,EAAE;gBACzB,SAAS,GAAG,IAAI,4CAAa,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;gBAC1F,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aACjC,MACC,MAAM,CAAC,OAAO,CAAC,IAAI,wCAAS,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;SAE7E,MAAM;YACL,MAAM,OAAO,GAAG,IAAI,wCAAqB,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,CAAC,AAAC;YAE3E,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SAC/B;KACF,AAAC;IAEF,IAAI,KAAK,CAAC,OAAO,CAAC,IAAG,CAAC,EACpB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAG,CAAC,MAAM,EAAE,CAAC,EAAE,CACjC,QAAQ,CAAC,IAAI,EAAE,IAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAGzB,QAAQ,CAAC,IAAI,EAAE,IAAG,EAAE,GAAG,EAAE,YAAW,CAAC,CAAC;IAGxC,OAAO,IAAI,CAAC;CACb","sources":["src/CompressedTexturePlugin.ts","src/CompressedTextureFile.js","src/KTXParser.js","src/PVRParser.js"],"sourcesContent":["\n/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Fielding Johnston <fielding@justfielding.com> - Simply packaged the great work Rich had already done as a plugin for Phaser 3.24.1\n * @copyright    2021 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n// @ts-nocheck - todo\nimport AtlasJSONFile from 'phaser/src/loader/filetypes/AtlasJSONFile';\nimport { JSONHash } from 'phaser/src/textures/parsers/JSONHash';\nimport Events from 'phaser/src/textures/events';\nimport Merge from 'phaser/src/utils/object/Merge';\nimport ImageFile from 'phaser/src/loader/filetypes/ImageFile';\nimport IsPlainObject from 'phaser/src/utils/object/IsPlainObject';\nimport GetFastValue from 'phaser/src/utils/object/GetFastValue';\nimport MultiAtlasFile from 'phaser/src/loader/filetypes/MultiAtlasFile';\nimport IsSizePowerOfTwo from 'phaser/src/math/pow2/IsSizePowerOfTwo';\nimport CONST from 'phaser/src/const';\n\nimport CompressedTextureFile from './CompressedTextureFile';\n\nPhaser.Textures.TextureManager.prototype.addCompressedTexture = function (key, textureData, atlasData) {\n  let texture = null;\n\n  if (this.checkKey(key))\n  {\n      texture = this.create(key, textureData);\n\n      texture.add('__BASE', 0, 0, 0, textureData.width, textureData.height);\n\n      if (atlasData)\n      {\n          if (Array.isArray(atlasData))\n          {\n              for (let i = 0; i < atlasData.length; i++)\n              {\n                  JSONHash(texture, i, atlasData[i]);\n              }\n          }\n          else\n          {\n              JSONHash(texture, 0, atlasData);\n          }\n      }\n\n      this.emit(Events.ADD, key, texture);\n  } \n  return texture;\n}\n\n\nPhaser.Renderer.WebGL.WebGLRenderer.prototype.getCompressedTextures = function () {\n  const extString = 'WEBGL_compressed_texture_';\n  const wkExtString = 'WEBKIT_' + extString;\n\n  const hasExt = function (gl, format)\n  {\n      const results = gl.getExtension(extString + format) || gl.getExtension(wkExtString + format);\n\n      if (results)\n      {\n          const glEnums = {};\n\n          for (let key in results)\n          {\n              glEnums[results[key]] = key;\n          }\n\n          return glEnums;\n      }\n  };\n\n  const gl = this.gl;\n\n  return {\n      ETC: hasExt(gl, 'etc'),\n      ETC1: hasExt(gl, 'etc1'),\n      ATC: hasExt(gl, 'atc'),\n      ASTC: hasExt(gl, 'astc'),\n      BPTC: hasExt(gl, 'bptc'),\n      RGTC: hasExt(gl, 'rgtc'),\n      PVRTC: hasExt(gl, 'pvrtc'),\n      S3TC: hasExt(gl, 's3tc'),\n      S3TCSRGB: hasExt(gl, 's3tc_srgb'),\n      IMG: true\n  };\n}\n\nPhaser.Renderer.WebGL.WebGLRenderer.prototype.supportsCompressedTexture = function (baseFormat, format)\n{\n    const supportedFormats = this.compression[baseFormat.toUpperCase()];\n    if (supportedFormats)\n    {\n        if (format)\n        {\n            return format in supportedFormats;\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nPhaser.Renderer.WebGL.WebGLRenderer.prototype.getCompressedTextureName = function (baseFormat, format)\n{\n    const supportedFormats = this.compression[baseFormat.toUpperCase()];\n\n    if (format in supportedFormats)\n    {\n        return supportedFormats[format];\n    }\n}\n\nPhaser.Renderer.WebGL.WebGLRenderer.prototype.createTextureFromSource = function (source, width, height, scaleMode, forceClamp)\n{\n  if (forceClamp === undefined) { forceClamp = false; }\n\n  var gl = this.gl;\n  var minFilter = gl.NEAREST;\n  var magFilter = gl.NEAREST;\n  var wrap = gl.CLAMP_TO_EDGE;\n  var texture = null;\n\n  width = source ? source.width : width;\n  height = source ? source.height : height;\n\n  var pow = IsSizePowerOfTwo(width, height);\n\n  if (pow && !forceClamp)\n  {\n      wrap = gl.REPEAT;\n  }\n\n  if (scaleMode === CONST.ScaleModes.LINEAR && this.config.antialias)\n  {\n      minFilter = (pow) ? this.mipmapFilter : gl.LINEAR;\n      magFilter = gl.LINEAR;\n  }\n\n  if (source && source.compressed)\n  {\n      //  If you don't set minFilter to LINEAR then the compressed textures don't work!\n      minFilter = gl.LINEAR;\n      magFilter = gl.LINEAR;\n  }\n\n  if (!source && typeof width === 'number' && typeof height === 'number')\n  {\n      texture = this.createTexture2D(0, minFilter, magFilter, wrap, wrap, gl.RGBA, null, width, height);\n  }\n  else\n  {\n      texture = this.createTexture2D(0, minFilter, magFilter, wrap, wrap, gl.RGBA, source);\n  }\n\n  return texture;\n}\n\nPhaser.Renderer.WebGL.WebGLRenderer.prototype.createTexture2D = function (mipLevel, minFilter, magFilter, wrapT, wrapS, format, pixels, width, height, pma, forceSize, flipY)\n{\n  pma = (pma === undefined || pma === null) ? true : pma;\n  if (forceSize === undefined) { forceSize = false; }\n  if (flipY === undefined) { flipY = false; }\n\n  var gl = this.gl;\n  var texture = gl.createTexture();\n\n  this.setTexture2D(texture, 0);\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapS);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapT);\n\n  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, pma);\n  gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flipY);\n  \n  var generateMipmap = false;\n\n  if (pixels === null || pixels === undefined)\n  {\n      gl.texImage2D(gl.TEXTURE_2D, mipLevel, format, width, height, 0, format, gl.UNSIGNED_BYTE, null);\n\n      generateMipmap = IsSizePowerOfTwo(width, height);\n  }\n  else if (pixels.compressed)\n  {\n      width = pixels.width;\n      height = pixels.height;\n      generateMipmap = pixels.generateMipmap;\n\n      for (var i = 0; i < pixels.mipmaps.length; i++)\n      {\n          gl.compressedTexImage2D(gl.TEXTURE_2D, i, pixels.internalFormat, pixels.mipmaps[i].width, pixels.mipmaps[i].height, 0, pixels.mipmaps[i].data);\n      }\n  }\n  else\n  {\n      if (!forceSize)\n      {\n          width = pixels.width;\n          height = pixels.height;\n      }\n\n      gl.texImage2D(gl.TEXTURE_2D, mipLevel, format, format, gl.UNSIGNED_BYTE, pixels);\n      generateMipmap = IsSizePowerOfTwo(width, height);\n  }\n\n  if (generateMipmap)\n  {\n      gl.generateMipmap(gl.TEXTURE_2D);\n  }\n\n  this.setTexture2D(null, 0);\n\n  texture.isAlphaPremultiplied = pma;\n  texture.isRenderTexture = false;\n  texture.width = width;\n  texture.height = height;\n\n  this.nativeTextures.push(texture);\n\n  return texture;\n}\n\nexport default class CompressedTextureLoaderPlugin extends Phaser.Plugins.BasePlugin {\n    constructor(pluginManager) {\n        super(pluginManager);\n    }\n\n    init() {\n      if (Number(Phaser.VERSION.split('.')[1]) >= 60) {\n        throw new Error('Phaser v3.60 and later include support for compressed textures out of the box. Please use that instead.');\n      } else if (Number(Phaser.VERSION.split('.')[1]) !== 24) {\n        throw new Error('Phaser compressed texture plugin was made specifically for use with Phaser v3.24.1. Proceed with caution.')\n      }\n\n      // not sure how else to do this =/\n      this.game.renderer.compression = Phaser.Renderer.WebGL.WebGLRenderer.prototype.getCompressedTextures.call(this.game.renderer); \n\n      this.pluginManager.registerFileType('texture', compressedTextureLoaderCallback);\n    }\n\n    addToScene(scene) {\n        scene.sys.load['texture'] = compressedTextureLoaderCallback;\n    }\n}\n\n/**\n * Adds a Compressed Texture file to the current load queue. This feature is WebGL only.\n *\n * This method takes a key and a configuration object, which lists the different formats and files that map to them.\n *\n * The texture format object should be ordered in GPU priority order, with IMG last.\n *\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\n *\n * ```javascript\n * function preload ()\n * {\n *     this.load.texture('pic', {\n *         ASTC: { type: 'PVR', textureURL: 'pic-astc-4x4.pvr' },\n *         PVRTC: { type: 'PVR', textureURL: 'pic-pvrtc-4bpp-rgba.pvr' },\n *         S3TC: { type: 'PVR', textureURL: 'pic-dxt5.pvr' },\n *         IMG: { textureURL: 'pic.png }\n *     });\n`\n *\n * The 'IMG' entry is a fallback to a JPG or PNG, should the browser be unable to load any of the other\n * formats presented to this function.\n *\n * Phas *\n * Within those, it can parse the following texture compression formats:\n *\n * ETC\n * ETC1\n * ATC\n * ASTC\n * BPTC\n * RGTC\n * PVRTC\n * S3TC\n * S3TCSRGB\n *\n * To create compressed texture files use a 3rd party application such as:\n *\n * Texture Packer (https://www.codeandweb.com/texturepacker/tutorials/how-to-create-sprite-sheets-for-phaser3?utm_source=ad&utm_medium=banner&utm_campaign=phaser-2018-10-16)\n * PVRTexTool (https://developer.imaginationtech.com/pvrtextool/) - available for Windows, macOS and Linux.\n * Mail Texture Compression Tool (https://developer.arm.com/tools-and-software/graphics-and-gaming/mali-texture-compression-tool)\n * ASTC Encoder (https://github.com/ARM-software/astc-encoder)\n *\n * ASTCs must be: Channel Type: Unsigned Normalized Bytes (UNorm) and Color Space: Linear RGB\n *\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\n * loaded.\n *\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\n * then remove it from the Texture Manager first, before loading a new one.\n *\n * Instead of passing arguments you can pass a configuration object, such as:\n *\n * ```javascript\n * this.load.texture({\n *     key: 'doom',\n *     url: 'files/Doom.wad',\n *     dataType: Uint8Array\n * });\n * ```\n *\n * See the documentation for `Phaser.Types.Loader.FileTypes.CompressedTextureFileConfig` for more details.\n *\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\n * key. For example, if the prefix was `LEVEL1.` and the key was `Data` the final key will be `LEVEL1.Data` and\n * this is what you would use to retrieve the text from the Texture Manager.\n *\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\n *\n * Unlike other file loads in Phaser, you must provide a URL and extension.\n *\n * Note: The ability to load this type of file will only be available if the Compressed Texture File type has been built into Phaser.\n * It is available in the default build but can be excluded from custom builds.\n *\n * @method Phaser.Loader.LoaderPlugin#texture\n * @fires Phaser.Loader.LoaderPlugin#ADD\n * @since 3.60.0\n *\n * @param {string} key - The key to use for this file.\n * @param {Phaser.Types.Loader.FileTypes.CompressedTextureFileConfig} urls - The compressed texture configuration object.\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\n *\n * @return {this} The Loader instance.\n */\n\nfunction compressedTextureLoaderCallback(key, url, xhrSettings) {\n  const renderer = this.systems.renderer;\n\n  const AddEntry = function (loader, key, urls, xhrSettings) {\n    console.log('AddEntry()');\n    let entry = {\n      format: null,\n      type: null,\n      textureURL: undefined,\n      atlasURL: undefined,\n      multiAtlasURL: undefined,\n      multiPath: undefined,\n      multiBaseURL: undefined,\n    };\n\n    if (IsPlainObject(key)) {\n      const config = key;\n\n      key = GetFastValue(config, 'key');\n      (urls = GetFastValue(config, 'url')), (xhrSettings = GetFastValue(config, 'xhrSettings'));\n    }\n\n    let matched = false;\n\n    for (let textureBaseFormat in urls) {\n      console.log({ textureBaseFormat });\n\n\n      if (renderer.supportsCompressedTexture(textureBaseFormat)) {\n        const urlEntry = urls[textureBaseFormat];\n\n        if (typeof urlEntry === 'string') {\n          entry.textureURL = urlEntry;\n        } else {\n          entry = Merge(urlEntry, entry);\n        }\n\n        entry.format = textureBaseFormat.toUpperCase();\n\n        matched = true;\n\n        break;\n      }\n    }\n\n    if (!matched) {\n      console.warn('No supported compressed texture format or IMG fallback', key);\n    } else if (entry.format === 'IMG') {\n      let multifile;\n      if (entry.multiAtlasURL) {\n        multifile = new MultiAtlasFile(\n          this,\n          key,\n          entry.multiAtlasURL,\n          entry.multiPath,\n          entry.multiBaseURL,\n          xhrSettings\n        );\n        loader.addFile(multifile.files);\n      } else if (entry.atlasURL) {\n        multifile = new AtlasJSONFile(loader, key, entry.textureURL, entry.atlasURL, xhrSettings);\n        loader.addFile(multifile.files);\n      } else {\n        loader.addFile(new ImageFile(loader, key, entry.textureURL, xhrSettings));\n      }\n    } else {\n      const texture = new CompressedTextureFile(loader, key, entry, xhrSettings);\n\n      loader.addFile(texture.files);\n    }\n  };\n\n  if (Array.isArray(key)) {\n    for (let i = 0; i < key.length; i++) {\n      AddEntry(this, key[i]);\n    }\n  } else {\n    AddEntry(this, key, url, xhrSettings);\n  }\n\n  return this;\n}\n\n ","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @author       Fielding Johnston <fielding@justfielding.com> - Simply packaged the great work Rich had already done as a plugin for Phaser 3.24.1\n * @copyright    2021 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\nimport BinaryFile from 'phaser/src/loader/filetypes/BinaryFile';\nimport Class from 'phaser/src/utils/Class';\nimport JSONFile from 'phaser/src/loader/filetypes/JSONFile';\nimport MultiFile from 'phaser/src/loader/MultiFile';\nimport GetFastValue from 'phaser/src/utils/object/GetFastValue';\nimport KTXParser from './KTXParser';\nimport PVRParser from './PVRParser';\n\n/**\n * @classdesc\n * A Compressed Texture File suitable for loading by the Loader.\n *\n * These are created when you use the Phaser.Loader.LoaderPlugin#texture method and are not typically created directly.\n *\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#texture.\n *\n * @class CompressedTextureFile\n * @extends Phaser.Loader.MultiFile\n * @memberof Phaser.Loader.FileTypes\n * @constructor\n * @since 3.60.0\n *\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\n * @param {string} key - The key to use for this file.\n * @param {Phaser.Types.Loader.FileTypes.CompressedTextureFileEntry} entry - The compressed texture file entry to load.\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\n */\n\nvar CompressedTextureFile = new Class({\n  Extends: MultiFile,\n\n  initialize: function CompressedTextureFile(loader, key, entry, xhrSettings) {\n    console.log('CompressedTextureFile()::ctor', { loader, key, entry, xhrSettings });\n    if (entry.multiAtlasURL) {\n      var multi = new JSONFile(loader, {\n        key: key,\n        url: entry.multiAtlasURL,\n        xhrSettings: xhrSettings,\n        config: entry,\n      });\n\n      MultiFile.call(this, loader, 'texture', key, [multi]);\n    } else {\n      var extension = entry.textureURL.substr(entry.textureURL.length - 3);\n      console.log({ extension });\n\n      if (!entry.type) {\n        entry.type = extension.toLowerCase() === 'ktx' ? 'KTX' : 'PVR';\n      }\n\n      var image = new BinaryFile(loader, {\n        key: key,\n        url: entry.textureURL,\n        extension: extension,\n        xhrSettings: xhrSettings,\n        config: entry,\n      });\n\n      console.log({ image });\n\n      if (entry.atlasURL) {\n        var data = new JSONFile(loader, {\n          key: key,\n          url: entry.atlasURL,\n          xhrSettings: xhrSettings,\n          config: entry,\n        });\n\n        MultiFile.call(this, loader, 'texture', key, [image, data]);\n      } else {\n        MultiFile.call(this, loader, 'texture', key, [image]);\n      }\n    }\n\n    this.config = entry;\n  },\n\n  /**\n   * Called by each File when it finishes loading.\n   *\n   * @method Phaser.Loader.FileTypes.CompressedTextureFile#onFileComplete\n   * @since 3.60.0\n   *\n   * @param {Phaser.Loader.File} file - The File that has completed processing.\n   */\n  onFileComplete: function (file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.pending--;\n\n      if (!this.config.multiAtlasURL) {\n        return;\n      }\n\n      if (file.type === 'json' && file.data.hasOwnProperty('textures')) {\n        //  Inspect the data for the files to now load\n        var textures = file.data.textures;\n\n        var config = this.config;\n        var loader = this.loader;\n\n        var currentBaseURL = loader.baseURL;\n        var currentPath = loader.path;\n        var currentPrefix = loader.prefix;\n\n        var baseURL = GetFastValue(config, 'multiBaseURL', this.baseURL);\n        var path = GetFastValue(config, 'multiPath', this.path);\n        var prefix = GetFastValue(config, 'prefix', this.prefix);\n        var textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\n\n        if (baseURL) {\n          loader.setBaseURL(baseURL);\n        }\n\n        if (path) {\n          loader.setPath(path);\n        }\n\n        if (prefix) {\n          loader.setPrefix(prefix);\n        }\n\n        for (var i = 0; i < textures.length; i++) {\n          //  \"image\": \"texture-packer-multi-atlas-0.png\",\n          var textureURL = textures[i].image;\n\n          var key = 'CMA' + this.multiKeyIndex + '_' + textureURL;\n\n          var image = new BinaryFile(loader, key, textureURL, textureXhrSettings);\n\n          this.addToMultiFile(image);\n\n          loader.addFile(image);\n\n          //  \"normalMap\": \"texture-packer-multi-atlas-0_n.png\",\n          if (textures[i].normalMap) {\n            var normalMap = new BinaryFile(loader, key, textures[i].normalMap, textureXhrSettings);\n\n            normalMap.type = 'normalMap';\n\n            image.setLink(normalMap);\n\n            this.addToMultiFile(normalMap);\n\n            loader.addFile(normalMap);\n          }\n        }\n\n        //  Reset the loader settings\n        loader.setBaseURL(currentBaseURL);\n        loader.setPath(currentPath);\n        loader.setPrefix(currentPrefix);\n      }\n    }\n  },\n\n  /**\n   * Adds this file to its target cache upon successful loading and processing.\n   *\n   * @method Phaser.Loader.FileTypes.CompressedTextureFile#addToCache\n   * @since 3.60.0\n   */\n  addToCache: function () {\n    console.log('addToCache()');\n    if (this.isReadyToProcess()) {\n      var entry = this.config;\n\n      if (entry.multiAtlasURL) {\n        this.addMultiToCache();\n      } else {\n        var renderer = this.loader.systems.renderer;\n        var textureManager = this.loader.textureManager;\n        var textureData;\n\n        var image = this.files[0];\n        var json = this.files[1];\n\n        if (entry.type === 'PVR') {\n          textureData = PVRParser(image.data);\n          console.log('pvr parsed data: ', textureData);\n        } else if (entry.type === 'KTX') {\n          textureData = KTXParser(image.data);\n          console.log('ktx parsed data: ', textureData);\n        }\n\n        if (textureData && renderer.supportsCompressedTexture(entry.format, textureData.internalFormat)) {\n          textureData.format = renderer.getCompressedTextureName(entry.format, textureData.internalFormat);\n\n          var atlasData = json && json.data ? json.data : null;\n\n          textureManager.addCompressedTexture(image.key, textureData, atlasData);\n        }\n      }\n\n      this.complete = true;\n    }\n  },\n\n  /**\n   * Adds all of the multi-file entties to their target caches upon successful loading and processing.\n   *\n   * @method Phaser.Loader.FileTypes.CompressedTextureFile#addMultiToCache\n   * @since 3.60.0\n   */\n  addMultiToCache: function () {\n    var entry = this.config;\n    var json = this.files[0];\n\n    var data = [];\n    var images = [];\n    var normalMaps = [];\n\n    var renderer = this.loader.systems.renderer;\n    var textureManager = this.loader.textureManager;\n    var textureData;\n\n    for (var i = 1; i < this.files.length; i++) {\n      var file = this.files[i];\n\n      if (file.type === 'normalMap') {\n        continue;\n      }\n\n      var pos = file.key.indexOf('_');\n      var key = file.key.substr(pos + 1);\n\n      var image = file.data;\n\n      //  Now we need to find out which json entry this mapped to\n      for (var t = 0; t < json.data.textures.length; t++) {\n        var item = json.data.textures[t];\n\n        if (item.image === key) {\n          if (entry.type === 'PVR') {\n            textureData = PVRParser(image);\n          } else if (entry.type === 'KTX') {\n            textureData = KTXParser(image);\n          }\n\n          if (textureData && renderer.supportsCompressedTexture(entry.format, textureData.internalFormat)) {\n            textureData.format = renderer.getCompressedTextureName(entry.format, textureData.internalFormat);\n\n            images.push(textureData);\n\n            data.push(item);\n\n            if (file.linkFile) {\n              normalMaps.push(file.linkFile.data);\n            }\n          }\n\n          break;\n        }\n      }\n    }\n\n    if (normalMaps.length === 0) {\n      normalMaps = undefined;\n    }\n\n    textureManager.addAtlasJSONArray(this.key, images, data, normalMaps);\n\n    this.complete = true;\n  },\n});\n\nexport default CompressedTextureFile;\n","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2021 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * Parses a KTX format Compressed Texture file and generates texture data suitable for WebGL from it.\n *\n * @function Phaser.Textures.Parsers.KTXParser\n * @memberof Phaser.Textures.Parsers\n * @since 3.60.0\n *\n * @param {ArrayBuffer} data - The data object created by the Compressed Texture File Loader.\n *\n * @return {Phaser.Types.Textures.CompressedTextureData} The Compressed Texture data.\n */\nvar KTXParser = function (data) {\n  var idCheck = [0xab, 0x4b, 0x54, 0x58, 0x20, 0x31, 0x31, 0xbb, 0x0d, 0x0a, 0x1a, 0x0a];\n\n  var i;\n  var id = new Uint8Array(data, 0, 12);\n\n  for (i = 0; i < id.length; i++) {\n    if (id[i] !== idCheck[i]) {\n      console.warn('KTXParser - Invalid file format');\n\n      return;\n    }\n  }\n\n  var size = Uint32Array.BYTES_PER_ELEMENT;\n\n  var head = new DataView(data, 12, 13 * size);\n\n  var littleEndian = head.getUint32(0, true) === 0x04030201;\n\n  var glType = head.getUint32(1 * size, littleEndian);\n\n  if (glType !== 0) {\n    console.warn('KTXParser - Only compressed formats supported');\n\n    return;\n  }\n\n  var internalFormat = head.getUint32(4 * size, littleEndian);\n  var width = head.getUint32(6 * size, littleEndian);\n  var height = head.getUint32(7 * size, littleEndian);\n\n  var mipmapLevels = Math.max(1, head.getUint32(11 * size, littleEndian));\n\n  var bytesOfKeyValueData = head.getUint32(12 * size, littleEndian);\n\n  var mipmaps = new Array(mipmapLevels);\n\n  var offset = 12 + 13 * 4 + bytesOfKeyValueData;\n  var levelWidth = width;\n  var levelHeight = height;\n\n  for (i = 0; i < mipmapLevels; i++) {\n    var levelSize = new Int32Array(data, offset, 1)[0];\n\n    // levelSize field\n    offset += 4;\n\n    mipmaps[i] = {\n      data: new Uint8Array(data, offset, levelSize),\n      width: levelWidth,\n      height: levelHeight,\n    };\n\n    // add padding for odd sized image\n    // offset += 3 - ((levelSize + 3) % 4);\n\n    levelWidth = Math.max(1, levelWidth >> 1);\n    levelHeight = Math.max(1, levelHeight >> 1);\n\n    offset += levelSize;\n  }\n\n  return {\n    mipmaps: mipmaps,\n    width: width,\n    height: height,\n    internalFormat: internalFormat,\n    compressed: true,\n    generateMipmap: false,\n  };\n};\n\nexport default KTXParser;\n","/**\n * @author       Richard Davey <rich@photonstorm.com>\n * @copyright    2021 Photon Storm Ltd.\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\n */\n\n/**\n * @ignore\n */\nfunction GetSize(width, height, x, y, dx, dy, mult) {\n  if (mult === undefined) {\n    mult = 16;\n  }\n\n  return Math.floor((width + x) / dx) * Math.floor((height + y) / dy) * mult;\n}\n\n/**\n * @ignore\n */\nfunction PVRTC2bppSize(width, height) {\n  width = Math.max(width, 16);\n  height = Math.max(height, 8);\n\n  return (width * height) / 4;\n}\n\n/**\n * @ignore\n */\nfunction PVRTC4bppSize(width, height) {\n  width = Math.max(width, 8);\n  height = Math.max(height, 8);\n\n  return (width * height) / 2;\n}\n\n/**\n * @ignore\n */\nfunction DXTEtcSmallSize(width, height) {\n  return GetSize(width, height, 3, 3, 4, 4, 8);\n}\n\n/**\n * @ignore\n */\nfunction DXTEtcAstcBigSize(width, height) {\n  return GetSize(width, height, 3, 3, 4, 4);\n}\n\n/**\n * @ignore\n */\nfunction ATC5x4Size(width, height) {\n  return GetSize(width, height, 4, 3, 5, 4);\n}\n\n/**\n * @ignore\n */\nfunction ATC5x5Size(width, height) {\n  return GetSize(width, height, 4, 4, 5, 5);\n}\n\n/**\n * @ignore\n */\nfunction ATC6x5Size(width, height) {\n  return GetSize(width, height, 5, 4, 6, 5);\n}\n\n/**\n * @ignore\n */\nfunction ATC6x6Size(width, height) {\n  return GetSize(width, height, 5, 5, 6, 6);\n}\n\n/**\n * @ignore\n */\nfunction ATC8x5Size(width, height) {\n  return GetSize(width, height, 7, 4, 8, 5);\n}\n\n/**\n * @ignore\n */\nfunction ATC8x6Size(width, height) {\n  return GetSize(width, height, 7, 5, 8, 6);\n}\n\n/**\n * @ignore\n */\nfunction ATC8x8Size(width, height) {\n  return GetSize(width, height, 7, 7, 8, 8);\n}\n\n/**\n * @ignore\n */\nfunction ATC10x5Size(width, height) {\n  return GetSize(width, height, 9, 4, 10, 5);\n}\n\n/**\n * @ignore\n */\nfunction ATC10x6Size(width, height) {\n  return GetSize(width, height, 9, 5, 10, 6);\n}\n\n/**\n * @ignore\n */\nfunction ATC10x8Size(width, height) {\n  return GetSize(width, height, 9, 7, 10, 8);\n}\n\n/**\n * @ignore\n */\nfunction ATC10x10Size(width, height) {\n  return GetSize(width, height, 9, 9, 10, 10);\n}\n\n/**\n * @ignore\n */\nfunction ATC12x10Size(width, height) {\n  return GetSize(width, height, 11, 9, 12, 10);\n}\n\n/**\n * @ignore\n */\nfunction ATC12x12Size(width, height) {\n  return GetSize(width, height, 11, 11, 12, 12);\n}\n\n/**\n * @ignore\n *\n * 0: COMPRESSED_RGB_PVRTC_2BPPV1_IMG\n * 1: COMPRESSED_RGBA_PVRTC_2BPPV1_IMG\n * 2: COMPRESSED_RGB_PVRTC_4BPPV1_IMG\n * 3: COMPRESSED_RGBA_PVRTC_4BPPV1_IMG\n * 6: COMPRESSED_RGB_ETC1\n * 7: COMPRESSED_RGB_S3TC_DXT1_EXT\n * 8: COMPRESSED_RGBA_S3TC_DXT1_EXT\n * 9: COMPRESSED_RGBA_S3TC_DXT3_EXT\n * 11: COMPRESSED_RGBA_S3TC_DXT5_EXT\n * 22: COMPRESSED_RGB8_ETC2\n * 23: COMPRESSED_RGBA8_ETC2_EAC\n * 24: COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2\n * 25: COMPRESSED_R11_EAC\n * 26: COMPRESSED_RG11_EAC\n * 27: COMPRESSED_RGBA_ASTC_4x4_KHR\n * 28: COMPRESSED_RGBA_ASTC_5x4_KHR\n * 29: COMPRESSED_RGBA_ASTC_5x5_KHR\n * 30: COMPRESSED_RGBA_ASTC_6x5_KHR\n * 31: COMPRESSED_RGBA_ASTC_6x6_KHR\n * 32: COMPRESSED_RGBA_ASTC_8x5_KHR\n * 33: COMPRESSED_RGBA_ASTC_8x6_KHR\n * 34: COMPRESSED_RGBA_ASTC_8x8_KHR\n * 35: COMPRESSED_RGBA_ASTC_10x5_KHR\n * 36: COMPRESSED_RGBA_ASTC_10x6_KHR\n * 37: COMPRESSED_RGBA_ASTC_10x8_KHR\n * 38: COMPRESSED_RGBA_ASTC_10x10_KHR\n * 39: COMPRESSED_RGBA_ASTC_12x10_KHR\n * 40: COMPRESSED_RGBA_ASTC_12x12_KHR\n */\nvar FORMATS = {\n  0: { sizeFunc: PVRTC2bppSize, glFormat: 0x8c01 },\n  1: { sizeFunc: PVRTC2bppSize, glFormat: 0x8c03 },\n  2: { sizeFunc: PVRTC4bppSize, glFormat: 0x8c00 },\n  3: { sizeFunc: PVRTC4bppSize, glFormat: 0x8c02 },\n  6: { sizeFunc: DXTEtcSmallSize, glFormat: 0x8d64 },\n  7: { sizeFunc: DXTEtcSmallSize, glFormat: 0x83f0 },\n  8: { sizeFunc: DXTEtcAstcBigSize, glFormat: 0x83f1 },\n  9: { sizeFunc: DXTEtcAstcBigSize, glFormat: 0x83f2 },\n  11: { sizeFunc: DXTEtcAstcBigSize, glFormat: 0x83f3 },\n  22: { sizeFunc: DXTEtcSmallSize, glFormat: 0x9274 },\n  23: { sizeFunc: DXTEtcAstcBigSize, glFormat: 0x9278 },\n  24: { sizeFunc: DXTEtcSmallSize, glFormat: 0x9276 },\n  25: { sizeFunc: DXTEtcSmallSize, glFormat: 0x9270 },\n  26: { sizeFunc: DXTEtcAstcBigSize, glFormat: 0x9272 },\n  27: { sizeFunc: DXTEtcAstcBigSize, glFormat: 0x93b0 },\n  28: { sizeFunc: ATC5x4Size, glFormat: 0x93b1 },\n  29: { sizeFunc: ATC5x5Size, glFormat: 0x93b2 },\n  30: { sizeFunc: ATC6x5Size, glFormat: 0x93b3 },\n  31: { sizeFunc: ATC6x6Size, glFormat: 0x93b4 },\n  32: { sizeFunc: ATC8x5Size, glFormat: 0x93b5 },\n  33: { sizeFunc: ATC8x6Size, glFormat: 0x93b6 },\n  34: { sizeFunc: ATC8x8Size, glFormat: 0x93b7 },\n  35: { sizeFunc: ATC10x5Size, glFormat: 0x93b8 },\n  36: { sizeFunc: ATC10x6Size, glFormat: 0x93b9 },\n  37: { sizeFunc: ATC10x8Size, glFormat: 0x93ba },\n  38: { sizeFunc: ATC10x10Size, glFormat: 0x93bb },\n  39: { sizeFunc: ATC12x10Size, glFormat: 0x93bc },\n  40: { sizeFunc: ATC12x12Size, glFormat: 0x93bd },\n};\n\n/**\n * Parses a PVR format Compressed Texture file and generates texture data suitable for WebGL from it.\n *\n * @function Phaser.Textures.Parsers.PVRParser\n * @memberof Phaser.Textures.Parsers\n * @since 3.60.0\n *\n * @param {ArrayBuffer} data - The data object created by the Compressed Texture File Loader.\n *\n * @return {Phaser.Types.Textures.CompressedTextureData} The Compressed Texture data.\n */\nvar PVRParser = function (data) {\n  var header = new Uint32Array(data, 0, 13);\n\n  //  PIXEL_FORMAT_INDEX\n  var pvrFormat = header[2];\n\n  var internalFormat = FORMATS[pvrFormat].glFormat;\n  var sizeFunction = FORMATS[pvrFormat].sizeFunc;\n\n  //  MIPMAPCOUNT_INDEX\n  var mipmapLevels = header[11];\n\n  //  WIDTH_INDEX\n  var width = header[7];\n\n  //  HEIGHT_INDEX\n  var height = header[6];\n\n  //  HEADER_SIZE + METADATA_SIZE_INDEX\n  var dataOffset = 52 + header[12];\n\n  var image = new Uint8Array(data, dataOffset);\n\n  var mipmaps = new Array(mipmapLevels);\n\n  var offset = 0;\n  var levelWidth = width;\n  var levelHeight = height;\n\n  for (var i = 0; i < mipmapLevels; i++) {\n    var levelSize = sizeFunction(levelWidth, levelHeight);\n\n    mipmaps[i] = {\n      data: new Uint8Array(image.buffer, image.byteOffset + offset, levelSize),\n      width: levelWidth,\n      height: levelHeight,\n    };\n\n    levelWidth = Math.max(1, levelWidth >> 1);\n    levelHeight = Math.max(1, levelHeight >> 1);\n\n    offset += levelSize;\n  }\n\n  return {\n    mipmaps: mipmaps,\n    width: width,\n    height: height,\n    internalFormat: internalFormat,\n    compressed: true,\n    generateMipmap: false,\n  };\n};\n\nexport default PVRParser;\n"],"names":[],"version":3,"file":"CompressedTexturePlugin.esm.js.map"}